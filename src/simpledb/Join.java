package simpledb;
import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends AbstractDbIterator {

    private JoinPredicate predicate;
    private DbIterator leftRelationDbIterator;
    private DbIterator rightRelationDbIterator;

    private Tuple leftTuple;

    /**
     * Constructor.  Accepts to children to join and the predicate
     * to join them on
     *
     * @param p The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.predicate = p;
        this.leftRelationDbIterator = child1;
        this.rightRelationDbIterator = child2;
    }

    /**
     * @see simpledb.TupleDesc#combine(TupleDesc, TupleDesc) for possible implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.combine(
            this.leftRelationDbIterator.getTupleDesc(),
            this.rightRelationDbIterator.getTupleDesc()
        );
    }

    public void open()
        throws DbException, NoSuchElementException, TransactionAbortedException {
        this.leftRelationDbIterator.open();
        this.rightRelationDbIterator.open();
    }

    public void close() {
        this.leftRelationDbIterator.close();
        this.rightRelationDbIterator.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.leftRelationDbIterator.rewind();
        this.rightRelationDbIterator.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no more tuples.
     * Logically, this is the next tuple in r1 cross r2 that satisfies the join
     * predicate.  There are many possible implementations; the simplest is a
     * nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of
     * Join are simply the concatenation of joining tuples from the left and
     * right relation. Therefore, if an equality predicate is used 
     * there will be two copies of the join attribute
     * in the results.  (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple readNext() throws TransactionAbortedException, DbException {
        if (this.leftTuple == null) {
            if (this.leftRelationDbIterator.hasNext()) {
                this.leftTuple = this.leftRelationDbIterator.next();
            } else {
                return null;
            }

            this.rightRelationDbIterator.rewind();
        }

        while (this.rightRelationDbIterator.hasNext()) {
            Tuple rightTuple = this.rightRelationDbIterator.next();
            if (!this.predicate.filter(this.leftTuple, rightTuple)) {
                continue;
            }
            return Tuple.combine(this.leftTuple, rightTuple);
        }

        this.leftTuple = null;
        return this.readNext();
    }
}
